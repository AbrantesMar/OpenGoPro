#!/bin/sh
# pre-commit/Open GoPro, Version 1.0 (C) Copyright 2021 GoPro, Inc. (http://gopro.com/OpenGoPro).
# This copyright was auto-generated on Thu, May  6, 2021 11:38:41 AM


# Redirect output to stderr.
exec 1>&2

allow=true

# Reapply stashed changed and exit
pop_exit() {
    # We're using cherry-pick instead of stash pop in order to specify the merge strategy. That is, we want
    # to take any changes that were added from this script
    git cherry-pick -n -m1 -Xours stash >/dev/null
    # The changes have been applied via cherry-pick. Now drop the stash reference that was holding them.
    git stash drop >/dev/null
    # Exit with return code that was passed into this function
    exit $1
}

# Stash, leaving staged changes, since we may be working with the staging area. These will be unstashed when exiting
git stash -k >/dev/null

if git rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=$(git hash-object -t tree /dev/null)
fi

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
allownonascii=false
if [ "$allownonascii" != "true" ] &&
    # Note that the use of brackets around a tr range is ok here, (it's
    # even required, for portability to Solaris 10's /usr/bin/tr), since
    # the square bracket bytes happen to fall in the designated range.
    test $(git diff --cached --name-only --diff-filter=A -z $against |
        LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0; then
    cat <<\EOF
Error: Attempt to add a non-ASCII file name.
This can cause problems if you want to work with people on other platforms.
To be portable it is advisable to rename the file.
EOF
    allow=false
fi

# For now, we won't use the whitespace pre-commit check
# # If there are whitespace errors, print the offending file names and fail.
# echo "Checking whitespace..."
# git diff-index --check --cached $against --
# if [ $? -ne 0 ]; then
#     allow=false
# else
#     echo "  Whitespace ok"
# fi
# echo

# If there was a failure...
if [[ "$allow" == false ]]; then
    cat <<\EOF

If you know what you are doing you can skip this check using:

    git commit --no-verify
EOF

    pop_exit 1
fi

# Check for copyrights and add if not existing
echo "Checking copyrights..."
# Get version from README.md
version=$(awk '/Current Version: /{print $NF}' README.md)
# If the version has changed in README.md
if [[ $(git diff --cached --diff-filter=M README.md | grep -c "+Current Version") > 0 ]]; then
    # Analyze all files with new version
    echo "New version: $version. Updating All copyrights"
    ./tools/hooks/copyright -i . $version
else
    # Only analyze modified files
    ./tools/hooks/copyright $version
fi
echo

# Reindex any changed or added (not deleted) files from the cached files
if [[ $(git diff --name-only --cached --diff-filter=ACM | wc -l) > 0 ]]; then
    git diff --name-only --cached --diff-filter=ACM | xargs git add
fi
# Reindex any changed or added (not deleted) files from non-cached files
if [ $(git diff --name-only --diff-filter=ACM | wc -l) -gt 0 ]; then
    git diff --name-only --diff-filter=ACM | xargs git add
fi

pop_exit 0
